240. Search a 2D Matrix II

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
Example:

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

solution:
class Solution(object):
    def searchMatrix(self, matrix, target):
        
        if len(matrix)==0:
            return False
        
        rowLength = 0
        colLength = len(matrix[0])-1
        
        while(colLength >=0 and rowLength<=len(matrix)-1):
            if target == matrix[rowLength][colLength]:
                return True
            elif target < matrix[rowLength][colLength]:
                colLength-=1
            else:
                rowLength+=1
        
        return False
        
  Time complexity : binary search o(log(n))
