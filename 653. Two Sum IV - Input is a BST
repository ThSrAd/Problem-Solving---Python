Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.
Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

Input: root = [2,1,3], k = 1
Output: false

solution:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from collections import deque
class Solution(object):
    def findTarget(self, root, k):
        # Breadth first approach
        if root is None:
            return False
        
        queue = deque([root])
        seen = set()
        
        while queue:
            curr = queue.popleft()
            if curr.val in seen:
                return True
            else:
                seen.add(k-curr.val)
                if curr.left:
                    queue.append(curr.left)
                if curr.right:
                    queue.append(curr.right)
        return False
            
