Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 13
Output: false
Example 3:

Input: matrix = [], target = 0
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
0 <= m, n <= 100
-104 <= matrix[i][j], target <= 104
?

SOLUTION
class Solution(object):
    def searchMatrix(self, matrix, target):
        
        if len(matrix)==0:
            return False
        
        rowLength = len(matrix)
        columnLength = len(matrix[0])
        
        left = 0
        right = (rowLength * columnLength -1)
        
        while(left <= right):
            mid = left -(left -right)//2
            midElement  = matrix[mid/columnLength] [mid%columnLength]
            
            if midElement==target:
                return True
            elif target>midElement:
                left = mid+1
            else:
                right = mid-1
            
        return False
            
 Time complexity: o(logn) binary search
