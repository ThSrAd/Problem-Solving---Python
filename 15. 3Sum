Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Notice that the solution set must not contain duplicate triplets.


Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 
Solution:
 class Solution(object):
    def threeSum(self, nums):
        res =[]
        nums.sort()
        
        #Base case 2 and 3
        if nums is None:
            return res
        elif len(nums)==1 and nums[0]==0:
            return res
        
        for i,a in enumerate(nums):
            if i>0 and nums[i] ==nums[i-1]:
                continue
            l = i+1
            r = len(nums)-1
            
            while(l<r):
                tsum = a+nums[l]+nums[r]
                if tsum>0:
                    r-=1
                elif tsum<0:
                    l+=1
                else:
                    res.append([a,nums[l],nums[r]])
                    l+=1
                    r-=1
                    while nums[l]==nums[l-1] and l<r:
                        l+=1
        return res
            
                    
                
            
